
M-1  Using For Loop
ArrayList<Integer> l = new ArrayList<Integer>(); 
int[] count = new int[n];
 for(int i=0;i<n;i++) 
{
 int num = arr[i]; 
count[num]++; 
} 
for(int i=0;i<count.length;i++) 
{
 if(count[i]>1) l.add(i); 
}
 if(l.isEmpty()) {
 l.add(-1);
 } 
return l;
T.C O(n)
S.C O(n)

M-2 Using map set and iterator

ArrayList<Integer> l = new ArrayList<Integer>();
        HashMap<Integer,Integer> m=new HashMap<>();
        
        for(int i=0;i<n;i++)
        {
            if(!m.containsKey(arr[i]))
            {
               m.put(arr[i],1);
               
            }
            else
            {
            int value=m.get(arr[i]);
            value++;
            m.put(arr[i],value);
            }
        }
        
        Set s = m.entrySet();
        Iterator itr = s.iterator();
        
        while(itr.hasNext())
        {
            
            Map.Entry entry = (Map.Entry)itr.next();
            int value = (int)entry.getValue();
            if(value >1)
            {
                int k = (int)entry.getKey();
                l.add(k);
            }
        }
         
        Collections.sort(l);
        if(l.isEmpty())
        l.add(-1);
        
        return l;

Using Map And Set
HashMap<Integer,Integer> m=new HashMap<>();
        HashSet s = new HashSet<Integer>();
        for(int i=0;i<n;i++)
        {
            if(!m.containsKey(arr[i]))
            {
               m.put(arr[i],1);
            }
            else
            {
            m.put(arr[i],m.get(arr[i])+1);
            s.add(arr[i]);
            }
        }
        
        ArrayList<Integer> l = new ArrayList<Integer>(s);
        Collections.sort(l);
        
        if(l.isEmpty())
        l.add(-1);
        
        return l;

Using Set

HashSet<Integer> hs = new HashSet<>();
        ArrayList<Integer> l = new ArrayList<>();
        for(int i=0;i<n;i++)
        {
            if(!hs.add(arr[i]))
            {
                if(!l.contains(arr[i]))
                l.add(arr[i]);
            }
        }
        Collections.sort(l);
        if(l.isEmpty())
        {
            l.add(-1);
        }
        return l;

Using neagative numbers
for(int i=0;i<nums.length;i++)
        {
            int index=Math.abs(nums[i]);
                if(nums[index]<1)
                {
                    return index;
                }
            nums[index]=-nums[index];
        }
        return -1;
T.C O(n)
S.C O(1)

Floyd Cycle Finding Algorithm

 public int findDuplicate(int[] nums) {
       int slow=nums[0];
        int fast=nums[0];
        do{
            slow=nums[slow];
            fast=nums[nums[fast]];
        }
        while(slow!=fast);
        
        fast=nums[0];
        while(slow!=fast)
        {
            slow=nums[slow];
            fast=nums[fast];
        }
        return slow;
    }
    
    T.C O(n)
    S.C O(1)
