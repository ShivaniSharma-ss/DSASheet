Brute Force

 public int trap(int[] height) {
        int n=height.length;
      int left[]=new int[n];
        int max=0;
        int right[]=new int[n];
        int total=0;
        for(int i=0;i<n;i++)
        {
            max=Math.max(max,height[i]);
            left[i]=max;
        }
        max=0;
        for(int i=n-1;i>=0;i--)
        {
            max=Math.max(max,height[i]);
            right[i]=max;
        }
        
        for(int i=n-1;i>=0;i--)
        {
            int water=Math.min(left[i],right[i])-height[i];
            total=total+water;
        }
        return total;
    }
    
    T.C (n)
    S.C O(n)
    
    
    M-2 Optimized Approach
    
       public int trap(int[] height) {
        int n=height.length;
        int maxIndex=0;
        int total=0;
        int max=0;
         for(int i=0;i<n;i++)
        {
         if(height[i]>max)
         {
             max=height[i];
             maxIndex=i;
         }
         }
         int leftMax=0;
    for(int i=0;i<maxIndex;i++)
    {
        leftMax=Math.max(leftMax,height[i]);
        int water=Math.min(leftMax,max)-height[i];
        total=total+water;
    }
        leftMax=0;
        for(int i=n-1;i>maxIndex;i--)
        {
        leftMax=Math.max(leftMax,height[i]);
        int water=Math.min(leftMax,max)-height[i];
        total=total+water; 
        }
        return total;
    }
    
    T.C O(n)
    S.C O(1)
    
