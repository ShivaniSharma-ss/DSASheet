M-1 Sort the array
T.C O(N log N)
S.C O(1)

M-2 Using 2 arrays
 Traverse the array if we found negative element put it in negative array and if we found positive element then put it in positive array and then traverse array and put negative elements first then positive elements.
TC : O(2N)
SC : O(N)

int pc=0,nc=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i] > 0)
            pc++;
            else
            nc++;
        }
        int[] pos = new int[pc];
        int[] neg = new int[nc];
        int k=0,k1=0;
        for(int i=0;i<n;i++)
        {
            if(arr[i] < 0)
            {
                neg[k] = arr[i];
                k++;
            }
            else
            {
                pos[k1] = arr[i];
                k1++;
            }
        }
        
        for(int i=0;i<pc;i++)
        {
            arr[i] = pos[i];
        }
        int m =0;
        for(int i=pc;i<n;i++)
        {
            arr[i] = neg[m];
            m++;
        }

M-3 Using 2 pointer(Dutch National Flag)

Using two pointers - I think it can not be applied in this problem.
int left = 0,right=n-1;
      
      while(left <= right){
      
      if(arr[left] > 0 && arr[right] >0)
      left++;
      
      else if(arr[left] < 0 && arr[right] > 0)
      {
          int temp = arr[left];
          arr[left] = arr[right];
          arr[right] = temp;
          right--;
          left++;
      }
      
      else if(arr[left] < 0 && arr[right] < 0)
      right--;
      
      else{
          left++;
          right--;
      }
      }



Quick Sort(Not working for DSA)

int pivot=0;
        int i =n;
        int j=0;
        while(j<i && j<n)
        {
            
        if(arr[j] < pivot)
            {
                i--;
                int temp = arr[j];
                arr[j] = arr[i];
                arr[i] = temp;
            } 
            j++;
            
            
        }
