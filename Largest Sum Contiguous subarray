Brute Force
long max=Integer.MIN_VALUE; 
long cs=0;
 for(int i=0;i<arr.length;i++)
 {
 for(int j=i;j<arr.length;j++) {
 cs = 0;
 for(int k=i;k<=j;k++) {
 cs = cs+arr[k];
 } 
max = Math.max(cs,max); 
} }
 return max;
T.C O(n*3)
S.C O(1)
M-1 Optimal
long sum=0;
  long max=Integer.MIN_VALUE;
        // Your code here
        for(int i=0;i<n;i++)
        {
          sum=0;
            for(int j=i;j<n;j++)
            {
               sum=sum+arr[j];
               max=Math.max(max,sum);
             }
        }
        return max;
T.C O(N*2)
S.C O(1)




Kadane Algorithm 
int[] arr = {-5,4,6,-3,4,-1};
 int n = arr.length; 
int maxsum=0,currsum=0;
 for(int i=0;i<n;i++) { 
currsum = currsum+arr[i];
 if(currsum>maxsum) 
maxsum=currsum; 
if(currsum<0) 
currsum=0; 
} 
System.out.println(maxsum);
T.C O(N)
S.C O(1)
